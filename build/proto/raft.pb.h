// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raft_2eproto;
namespace rf {
class AppendEntriesRequest;
class AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class AppendEntriesResponse;
class AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class InstallSnapShotRequest;
class InstallSnapShotRequestDefaultTypeInternal;
extern InstallSnapShotRequestDefaultTypeInternal _InstallSnapShotRequest_default_instance_;
class InstallSnapShotResponse;
class InstallSnapShotResponseDefaultTypeInternal;
extern InstallSnapShotResponseDefaultTypeInternal _InstallSnapShotResponse_default_instance_;
class RequestVote;
class RequestVoteDefaultTypeInternal;
extern RequestVoteDefaultTypeInternal _RequestVote_default_instance_;
class ResponseVote;
class ResponseVoteDefaultTypeInternal;
extern ResponseVoteDefaultTypeInternal _ResponseVote_default_instance_;
}  // namespace rf
PROTOBUF_NAMESPACE_OPEN
template<> ::rf::AppendEntriesRequest* Arena::CreateMaybeMessage<::rf::AppendEntriesRequest>(Arena*);
template<> ::rf::AppendEntriesResponse* Arena::CreateMaybeMessage<::rf::AppendEntriesResponse>(Arena*);
template<> ::rf::InstallSnapShotRequest* Arena::CreateMaybeMessage<::rf::InstallSnapShotRequest>(Arena*);
template<> ::rf::InstallSnapShotResponse* Arena::CreateMaybeMessage<::rf::InstallSnapShotResponse>(Arena*);
template<> ::rf::RequestVote* Arena::CreateMaybeMessage<::rf::RequestVote>(Arena*);
template<> ::rf::ResponseVote* Arena::CreateMaybeMessage<::rf::ResponseVote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rf {

// ===================================================================

class AppendEntriesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rf.AppendEntriesRequest) */ {
 public:
  inline AppendEntriesRequest() : AppendEntriesRequest(nullptr) {}
  virtual ~AppendEntriesRequest();

  AppendEntriesRequest(const AppendEntriesRequest& from);
  AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
    : AppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesRequest& default_instance();

  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
               &_AppendEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRequest* New() const final {
    return CreateMaybeMessage<AppendEntriesRequest>(nullptr);
  }

  AppendEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rf.AppendEntriesRequest";
  }
  protected:
  explicit AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMSendLogsFieldNumber = 6,
    kMTermFieldNumber = 1,
    kMLeaderIdFieldNumber = 2,
    kMPrevLogIndexFieldNumber = 3,
    kMPrevLogTermFieldNumber = 4,
    kMLeaderCommitFieldNumber = 5,
  };
  // bytes m_sendLogs = 6;
  void clear_m_sendlogs();
  const std::string& m_sendlogs() const;
  void set_m_sendlogs(const std::string& value);
  void set_m_sendlogs(std::string&& value);
  void set_m_sendlogs(const char* value);
  void set_m_sendlogs(const void* value, size_t size);
  std::string* mutable_m_sendlogs();
  std::string* release_m_sendlogs();
  void set_allocated_m_sendlogs(std::string* m_sendlogs);
  private:
  const std::string& _internal_m_sendlogs() const;
  void _internal_set_m_sendlogs(const std::string& value);
  std::string* _internal_mutable_m_sendlogs();
  public:

  // int32 m_term = 1;
  void clear_m_term();
  ::PROTOBUF_NAMESPACE_ID::int32 m_term() const;
  void set_m_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_term() const;
  void _internal_set_m_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_leaderId = 2;
  void clear_m_leaderid();
  ::PROTOBUF_NAMESPACE_ID::int32 m_leaderid() const;
  void set_m_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_leaderid() const;
  void _internal_set_m_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_prevLogIndex = 3;
  void clear_m_prevlogindex();
  ::PROTOBUF_NAMESPACE_ID::int32 m_prevlogindex() const;
  void set_m_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_prevlogindex() const;
  void _internal_set_m_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_prevLogTerm = 4;
  void clear_m_prevlogterm();
  ::PROTOBUF_NAMESPACE_ID::int32 m_prevlogterm() const;
  void set_m_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_prevlogterm() const;
  void _internal_set_m_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_leaderCommit = 5;
  void clear_m_leadercommit();
  ::PROTOBUF_NAMESPACE_ID::int32 m_leadercommit() const;
  void set_m_leadercommit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_leadercommit() const;
  void _internal_set_m_leadercommit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rf.AppendEntriesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_sendlogs_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_term_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_leaderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_prevlogindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_prevlogterm_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_leadercommit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rf.AppendEntriesResponse) */ {
 public:
  inline AppendEntriesResponse() : AppendEntriesResponse(nullptr) {}
  virtual ~AppendEntriesResponse();

  AppendEntriesResponse(const AppendEntriesResponse& from);
  AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
    : AppendEntriesResponse() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesResponse& default_instance();

  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
               &_AppendEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResponse* New() const final {
    return CreateMaybeMessage<AppendEntriesResponse>(nullptr);
  }

  AppendEntriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rf.AppendEntriesResponse";
  }
  protected:
  explicit AppendEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMTermFieldNumber = 1,
    kMSuccessFieldNumber = 2,
    kMConflictTermFieldNumber = 3,
    kMConflictIndexFieldNumber = 4,
  };
  // int32 m_term = 1;
  void clear_m_term();
  ::PROTOBUF_NAMESPACE_ID::int32 m_term() const;
  void set_m_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_term() const;
  void _internal_set_m_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool m_success = 2;
  void clear_m_success();
  bool m_success() const;
  void set_m_success(bool value);
  private:
  bool _internal_m_success() const;
  void _internal_set_m_success(bool value);
  public:

  // int32 m_conflict_term = 3;
  void clear_m_conflict_term();
  ::PROTOBUF_NAMESPACE_ID::int32 m_conflict_term() const;
  void set_m_conflict_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_conflict_term() const;
  void _internal_set_m_conflict_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 m_conflict_index = 4;
  void clear_m_conflict_index();
  ::PROTOBUF_NAMESPACE_ID::int32 m_conflict_index() const;
  void set_m_conflict_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_m_conflict_index() const;
  void _internal_set_m_conflict_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rf.AppendEntriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_term_;
  bool m_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_conflict_term_;
  ::PROTOBUF_NAMESPACE_ID::int32 m_conflict_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class RequestVote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rf.RequestVote) */ {
 public:
  inline RequestVote() : RequestVote(nullptr) {}
  virtual ~RequestVote();

  RequestVote(const RequestVote& from);
  RequestVote(RequestVote&& from) noexcept
    : RequestVote() {
    *this = ::std::move(from);
  }

  inline RequestVote& operator=(const RequestVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVote& operator=(RequestVote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVote& default_instance();

  static inline const RequestVote* internal_default_instance() {
    return reinterpret_cast<const RequestVote*>(
               &_RequestVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestVote& a, RequestVote& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVote* New() const final {
    return CreateMaybeMessage<RequestVote>(nullptr);
  }

  RequestVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVote& from);
  void MergeFrom(const RequestVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rf.RequestVote";
  }
  protected:
  explicit RequestVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // int32 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 candidateId = 2;
  void clear_candidateid();
  ::PROTOBUF_NAMESPACE_ID::int32 candidateid() const;
  void set_candidateid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_candidateid() const;
  void _internal_set_candidateid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lastLogIndex = 3;
  void clear_lastlogindex();
  ::PROTOBUF_NAMESPACE_ID::int32 lastlogindex() const;
  void set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastlogindex() const;
  void _internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lastLogTerm = 4;
  void clear_lastlogterm();
  ::PROTOBUF_NAMESPACE_ID::int32 lastlogterm() const;
  void set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastlogterm() const;
  void _internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rf.RequestVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 candidateid_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastlogindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastlogterm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class ResponseVote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rf.ResponseVote) */ {
 public:
  inline ResponseVote() : ResponseVote(nullptr) {}
  virtual ~ResponseVote();

  ResponseVote(const ResponseVote& from);
  ResponseVote(ResponseVote&& from) noexcept
    : ResponseVote() {
    *this = ::std::move(from);
  }

  inline ResponseVote& operator=(const ResponseVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseVote& operator=(ResponseVote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseVote& default_instance();

  static inline const ResponseVote* internal_default_instance() {
    return reinterpret_cast<const ResponseVote*>(
               &_ResponseVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseVote& a, ResponseVote& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseVote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseVote* New() const final {
    return CreateMaybeMessage<ResponseVote>(nullptr);
  }

  ResponseVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseVote& from);
  void MergeFrom(const ResponseVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rf.ResponseVote";
  }
  protected:
  explicit ResponseVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kIsAcceptedFieldNumber = 2,
  };
  // int32 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isAccepted = 2;
  void clear_isaccepted();
  bool isaccepted() const;
  void set_isaccepted(bool value);
  private:
  bool _internal_isaccepted() const;
  void _internal_set_isaccepted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rf.ResponseVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  bool isaccepted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapShotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rf.InstallSnapShotRequest) */ {
 public:
  inline InstallSnapShotRequest() : InstallSnapShotRequest(nullptr) {}
  virtual ~InstallSnapShotRequest();

  InstallSnapShotRequest(const InstallSnapShotRequest& from);
  InstallSnapShotRequest(InstallSnapShotRequest&& from) noexcept
    : InstallSnapShotRequest() {
    *this = ::std::move(from);
  }

  inline InstallSnapShotRequest& operator=(const InstallSnapShotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapShotRequest& operator=(InstallSnapShotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstallSnapShotRequest& default_instance();

  static inline const InstallSnapShotRequest* internal_default_instance() {
    return reinterpret_cast<const InstallSnapShotRequest*>(
               &_InstallSnapShotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InstallSnapShotRequest& a, InstallSnapShotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapShotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallSnapShotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapShotRequest* New() const final {
    return CreateMaybeMessage<InstallSnapShotRequest>(nullptr);
  }

  InstallSnapShotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstallSnapShotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstallSnapShotRequest& from);
  void MergeFrom(const InstallSnapShotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapShotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rf.InstallSnapShotRequest";
  }
  protected:
  explicit InstallSnapShotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kTermFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kLastIncludeIndexFieldNumber = 3,
    kLastIncludeItemFieldNumber = 4,
    kOffsetFieldNumber = 5,
    kDoneFieldNumber = 7,
  };
  // repeated string data = 6;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // int32 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 leaderId = 2;
  void clear_leaderid();
  ::PROTOBUF_NAMESPACE_ID::int32 leaderid() const;
  void set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leaderid() const;
  void _internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lastIncludeIndex = 3;
  void clear_lastincludeindex();
  ::PROTOBUF_NAMESPACE_ID::int32 lastincludeindex() const;
  void set_lastincludeindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastincludeindex() const;
  void _internal_set_lastincludeindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lastIncludeItem = 4;
  void clear_lastincludeitem();
  ::PROTOBUF_NAMESPACE_ID::int32 lastincludeitem() const;
  void set_lastincludeitem(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lastincludeitem() const;
  void _internal_set_lastincludeitem(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 offset = 5;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool done = 7;
  void clear_done();
  bool done() const;
  void set_done(bool value);
  private:
  bool _internal_done() const;
  void _internal_set_done(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rf.InstallSnapShotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  ::PROTOBUF_NAMESPACE_ID::int32 leaderid_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastincludeindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 lastincludeitem_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  bool done_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// -------------------------------------------------------------------

class InstallSnapShotResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rf.InstallSnapShotResponse) */ {
 public:
  inline InstallSnapShotResponse() : InstallSnapShotResponse(nullptr) {}
  virtual ~InstallSnapShotResponse();

  InstallSnapShotResponse(const InstallSnapShotResponse& from);
  InstallSnapShotResponse(InstallSnapShotResponse&& from) noexcept
    : InstallSnapShotResponse() {
    *this = ::std::move(from);
  }

  inline InstallSnapShotResponse& operator=(const InstallSnapShotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstallSnapShotResponse& operator=(InstallSnapShotResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstallSnapShotResponse& default_instance();

  static inline const InstallSnapShotResponse* internal_default_instance() {
    return reinterpret_cast<const InstallSnapShotResponse*>(
               &_InstallSnapShotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InstallSnapShotResponse& a, InstallSnapShotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InstallSnapShotResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstallSnapShotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapShotResponse* New() const final {
    return CreateMaybeMessage<InstallSnapShotResponse>(nullptr);
  }

  InstallSnapShotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstallSnapShotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstallSnapShotResponse& from);
  void MergeFrom(const InstallSnapShotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapShotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rf.InstallSnapShotResponse";
  }
  protected:
  explicit InstallSnapShotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raft_2eproto);
    return ::descriptor_table_raft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
  };
  // int32 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::int32 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:rf.InstallSnapShotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppendEntriesRequest

// int32 m_term = 1;
inline void AppendEntriesRequest::clear_m_term() {
  m_term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::_internal_m_term() const {
  return m_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::m_term() const {
  // @@protoc_insertion_point(field_get:rf.AppendEntriesRequest.m_term)
  return _internal_m_term();
}
inline void AppendEntriesRequest::_internal_set_m_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_term_ = value;
}
inline void AppendEntriesRequest::set_m_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_term(value);
  // @@protoc_insertion_point(field_set:rf.AppendEntriesRequest.m_term)
}

// int32 m_leaderId = 2;
inline void AppendEntriesRequest::clear_m_leaderid() {
  m_leaderid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::_internal_m_leaderid() const {
  return m_leaderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::m_leaderid() const {
  // @@protoc_insertion_point(field_get:rf.AppendEntriesRequest.m_leaderId)
  return _internal_m_leaderid();
}
inline void AppendEntriesRequest::_internal_set_m_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_leaderid_ = value;
}
inline void AppendEntriesRequest::set_m_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_leaderid(value);
  // @@protoc_insertion_point(field_set:rf.AppendEntriesRequest.m_leaderId)
}

// int32 m_prevLogIndex = 3;
inline void AppendEntriesRequest::clear_m_prevlogindex() {
  m_prevlogindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::_internal_m_prevlogindex() const {
  return m_prevlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::m_prevlogindex() const {
  // @@protoc_insertion_point(field_get:rf.AppendEntriesRequest.m_prevLogIndex)
  return _internal_m_prevlogindex();
}
inline void AppendEntriesRequest::_internal_set_m_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_prevlogindex_ = value;
}
inline void AppendEntriesRequest::set_m_prevlogindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_prevlogindex(value);
  // @@protoc_insertion_point(field_set:rf.AppendEntriesRequest.m_prevLogIndex)
}

// int32 m_prevLogTerm = 4;
inline void AppendEntriesRequest::clear_m_prevlogterm() {
  m_prevlogterm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::_internal_m_prevlogterm() const {
  return m_prevlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::m_prevlogterm() const {
  // @@protoc_insertion_point(field_get:rf.AppendEntriesRequest.m_prevLogTerm)
  return _internal_m_prevlogterm();
}
inline void AppendEntriesRequest::_internal_set_m_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_prevlogterm_ = value;
}
inline void AppendEntriesRequest::set_m_prevlogterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_prevlogterm(value);
  // @@protoc_insertion_point(field_set:rf.AppendEntriesRequest.m_prevLogTerm)
}

// int32 m_leaderCommit = 5;
inline void AppendEntriesRequest::clear_m_leadercommit() {
  m_leadercommit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::_internal_m_leadercommit() const {
  return m_leadercommit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesRequest::m_leadercommit() const {
  // @@protoc_insertion_point(field_get:rf.AppendEntriesRequest.m_leaderCommit)
  return _internal_m_leadercommit();
}
inline void AppendEntriesRequest::_internal_set_m_leadercommit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_leadercommit_ = value;
}
inline void AppendEntriesRequest::set_m_leadercommit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_leadercommit(value);
  // @@protoc_insertion_point(field_set:rf.AppendEntriesRequest.m_leaderCommit)
}

// bytes m_sendLogs = 6;
inline void AppendEntriesRequest::clear_m_sendlogs() {
  m_sendlogs_.ClearToEmpty();
}
inline const std::string& AppendEntriesRequest::m_sendlogs() const {
  // @@protoc_insertion_point(field_get:rf.AppendEntriesRequest.m_sendLogs)
  return _internal_m_sendlogs();
}
inline void AppendEntriesRequest::set_m_sendlogs(const std::string& value) {
  _internal_set_m_sendlogs(value);
  // @@protoc_insertion_point(field_set:rf.AppendEntriesRequest.m_sendLogs)
}
inline std::string* AppendEntriesRequest::mutable_m_sendlogs() {
  // @@protoc_insertion_point(field_mutable:rf.AppendEntriesRequest.m_sendLogs)
  return _internal_mutable_m_sendlogs();
}
inline const std::string& AppendEntriesRequest::_internal_m_sendlogs() const {
  return m_sendlogs_.Get();
}
inline void AppendEntriesRequest::_internal_set_m_sendlogs(const std::string& value) {
  
  m_sendlogs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppendEntriesRequest::set_m_sendlogs(std::string&& value) {
  
  m_sendlogs_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rf.AppendEntriesRequest.m_sendLogs)
}
inline void AppendEntriesRequest::set_m_sendlogs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  m_sendlogs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rf.AppendEntriesRequest.m_sendLogs)
}
inline void AppendEntriesRequest::set_m_sendlogs(const void* value,
    size_t size) {
  
  m_sendlogs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rf.AppendEntriesRequest.m_sendLogs)
}
inline std::string* AppendEntriesRequest::_internal_mutable_m_sendlogs() {
  
  return m_sendlogs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppendEntriesRequest::release_m_sendlogs() {
  // @@protoc_insertion_point(field_release:rf.AppendEntriesRequest.m_sendLogs)
  return m_sendlogs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppendEntriesRequest::set_allocated_m_sendlogs(std::string* m_sendlogs) {
  if (m_sendlogs != nullptr) {
    
  } else {
    
  }
  m_sendlogs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_sendlogs,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rf.AppendEntriesRequest.m_sendLogs)
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// int32 m_term = 1;
inline void AppendEntriesResponse::clear_m_term() {
  m_term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResponse::_internal_m_term() const {
  return m_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResponse::m_term() const {
  // @@protoc_insertion_point(field_get:rf.AppendEntriesResponse.m_term)
  return _internal_m_term();
}
inline void AppendEntriesResponse::_internal_set_m_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_term_ = value;
}
inline void AppendEntriesResponse::set_m_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_term(value);
  // @@protoc_insertion_point(field_set:rf.AppendEntriesResponse.m_term)
}

// bool m_success = 2;
inline void AppendEntriesResponse::clear_m_success() {
  m_success_ = false;
}
inline bool AppendEntriesResponse::_internal_m_success() const {
  return m_success_;
}
inline bool AppendEntriesResponse::m_success() const {
  // @@protoc_insertion_point(field_get:rf.AppendEntriesResponse.m_success)
  return _internal_m_success();
}
inline void AppendEntriesResponse::_internal_set_m_success(bool value) {
  
  m_success_ = value;
}
inline void AppendEntriesResponse::set_m_success(bool value) {
  _internal_set_m_success(value);
  // @@protoc_insertion_point(field_set:rf.AppendEntriesResponse.m_success)
}

// int32 m_conflict_term = 3;
inline void AppendEntriesResponse::clear_m_conflict_term() {
  m_conflict_term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResponse::_internal_m_conflict_term() const {
  return m_conflict_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResponse::m_conflict_term() const {
  // @@protoc_insertion_point(field_get:rf.AppendEntriesResponse.m_conflict_term)
  return _internal_m_conflict_term();
}
inline void AppendEntriesResponse::_internal_set_m_conflict_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_conflict_term_ = value;
}
inline void AppendEntriesResponse::set_m_conflict_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_conflict_term(value);
  // @@protoc_insertion_point(field_set:rf.AppendEntriesResponse.m_conflict_term)
}

// int32 m_conflict_index = 4;
inline void AppendEntriesResponse::clear_m_conflict_index() {
  m_conflict_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResponse::_internal_m_conflict_index() const {
  return m_conflict_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AppendEntriesResponse::m_conflict_index() const {
  // @@protoc_insertion_point(field_get:rf.AppendEntriesResponse.m_conflict_index)
  return _internal_m_conflict_index();
}
inline void AppendEntriesResponse::_internal_set_m_conflict_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  m_conflict_index_ = value;
}
inline void AppendEntriesResponse::set_m_conflict_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_m_conflict_index(value);
  // @@protoc_insertion_point(field_set:rf.AppendEntriesResponse.m_conflict_index)
}

// -------------------------------------------------------------------

// RequestVote

// int32 term = 1;
inline void RequestVote::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVote::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVote::term() const {
  // @@protoc_insertion_point(field_get:rf.RequestVote.term)
  return _internal_term();
}
inline void RequestVote::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void RequestVote::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:rf.RequestVote.term)
}

// int32 candidateId = 2;
inline void RequestVote::clear_candidateid() {
  candidateid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVote::_internal_candidateid() const {
  return candidateid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVote::candidateid() const {
  // @@protoc_insertion_point(field_get:rf.RequestVote.candidateId)
  return _internal_candidateid();
}
inline void RequestVote::_internal_set_candidateid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  candidateid_ = value;
}
inline void RequestVote::set_candidateid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:rf.RequestVote.candidateId)
}

// int32 lastLogIndex = 3;
inline void RequestVote::clear_lastlogindex() {
  lastlogindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVote::_internal_lastlogindex() const {
  return lastlogindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVote::lastlogindex() const {
  // @@protoc_insertion_point(field_get:rf.RequestVote.lastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVote::_internal_set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastlogindex_ = value;
}
inline void RequestVote::set_lastlogindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:rf.RequestVote.lastLogIndex)
}

// int32 lastLogTerm = 4;
inline void RequestVote::clear_lastlogterm() {
  lastlogterm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVote::_internal_lastlogterm() const {
  return lastlogterm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestVote::lastlogterm() const {
  // @@protoc_insertion_point(field_get:rf.RequestVote.lastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVote::_internal_set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastlogterm_ = value;
}
inline void RequestVote::set_lastlogterm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:rf.RequestVote.lastLogTerm)
}

// -------------------------------------------------------------------

// ResponseVote

// int32 term = 1;
inline void ResponseVote::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseVote::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseVote::term() const {
  // @@protoc_insertion_point(field_get:rf.ResponseVote.term)
  return _internal_term();
}
inline void ResponseVote::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void ResponseVote::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:rf.ResponseVote.term)
}

// bool isAccepted = 2;
inline void ResponseVote::clear_isaccepted() {
  isaccepted_ = false;
}
inline bool ResponseVote::_internal_isaccepted() const {
  return isaccepted_;
}
inline bool ResponseVote::isaccepted() const {
  // @@protoc_insertion_point(field_get:rf.ResponseVote.isAccepted)
  return _internal_isaccepted();
}
inline void ResponseVote::_internal_set_isaccepted(bool value) {
  
  isaccepted_ = value;
}
inline void ResponseVote::set_isaccepted(bool value) {
  _internal_set_isaccepted(value);
  // @@protoc_insertion_point(field_set:rf.ResponseVote.isAccepted)
}

// -------------------------------------------------------------------

// InstallSnapShotRequest

// int32 term = 1;
inline void InstallSnapShotRequest::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotRequest::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotRequest::term() const {
  // @@protoc_insertion_point(field_get:rf.InstallSnapShotRequest.term)
  return _internal_term();
}
inline void InstallSnapShotRequest::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void InstallSnapShotRequest::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:rf.InstallSnapShotRequest.term)
}

// int32 leaderId = 2;
inline void InstallSnapShotRequest::clear_leaderid() {
  leaderid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotRequest::_internal_leaderid() const {
  return leaderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotRequest::leaderid() const {
  // @@protoc_insertion_point(field_get:rf.InstallSnapShotRequest.leaderId)
  return _internal_leaderid();
}
inline void InstallSnapShotRequest::_internal_set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leaderid_ = value;
}
inline void InstallSnapShotRequest::set_leaderid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:rf.InstallSnapShotRequest.leaderId)
}

// int32 lastIncludeIndex = 3;
inline void InstallSnapShotRequest::clear_lastincludeindex() {
  lastincludeindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotRequest::_internal_lastincludeindex() const {
  return lastincludeindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotRequest::lastincludeindex() const {
  // @@protoc_insertion_point(field_get:rf.InstallSnapShotRequest.lastIncludeIndex)
  return _internal_lastincludeindex();
}
inline void InstallSnapShotRequest::_internal_set_lastincludeindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastincludeindex_ = value;
}
inline void InstallSnapShotRequest::set_lastincludeindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastincludeindex(value);
  // @@protoc_insertion_point(field_set:rf.InstallSnapShotRequest.lastIncludeIndex)
}

// int32 lastIncludeItem = 4;
inline void InstallSnapShotRequest::clear_lastincludeitem() {
  lastincludeitem_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotRequest::_internal_lastincludeitem() const {
  return lastincludeitem_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotRequest::lastincludeitem() const {
  // @@protoc_insertion_point(field_get:rf.InstallSnapShotRequest.lastIncludeItem)
  return _internal_lastincludeitem();
}
inline void InstallSnapShotRequest::_internal_set_lastincludeitem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lastincludeitem_ = value;
}
inline void InstallSnapShotRequest::set_lastincludeitem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lastincludeitem(value);
  // @@protoc_insertion_point(field_set:rf.InstallSnapShotRequest.lastIncludeItem)
}

// int32 offset = 5;
inline void InstallSnapShotRequest::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotRequest::offset() const {
  // @@protoc_insertion_point(field_get:rf.InstallSnapShotRequest.offset)
  return _internal_offset();
}
inline void InstallSnapShotRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void InstallSnapShotRequest::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:rf.InstallSnapShotRequest.offset)
}

// repeated string data = 6;
inline int InstallSnapShotRequest::_internal_data_size() const {
  return data_.size();
}
inline int InstallSnapShotRequest::data_size() const {
  return _internal_data_size();
}
inline void InstallSnapShotRequest::clear_data() {
  data_.Clear();
}
inline std::string* InstallSnapShotRequest::add_data() {
  // @@protoc_insertion_point(field_add_mutable:rf.InstallSnapShotRequest.data)
  return _internal_add_data();
}
inline const std::string& InstallSnapShotRequest::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& InstallSnapShotRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:rf.InstallSnapShotRequest.data)
  return _internal_data(index);
}
inline std::string* InstallSnapShotRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:rf.InstallSnapShotRequest.data)
  return data_.Mutable(index);
}
inline void InstallSnapShotRequest::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:rf.InstallSnapShotRequest.data)
  data_.Mutable(index)->assign(value);
}
inline void InstallSnapShotRequest::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:rf.InstallSnapShotRequest.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void InstallSnapShotRequest::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rf.InstallSnapShotRequest.data)
}
inline void InstallSnapShotRequest::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rf.InstallSnapShotRequest.data)
}
inline std::string* InstallSnapShotRequest::_internal_add_data() {
  return data_.Add();
}
inline void InstallSnapShotRequest::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rf.InstallSnapShotRequest.data)
}
inline void InstallSnapShotRequest::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rf.InstallSnapShotRequest.data)
}
inline void InstallSnapShotRequest::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rf.InstallSnapShotRequest.data)
}
inline void InstallSnapShotRequest::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rf.InstallSnapShotRequest.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InstallSnapShotRequest::data() const {
  // @@protoc_insertion_point(field_list:rf.InstallSnapShotRequest.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InstallSnapShotRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:rf.InstallSnapShotRequest.data)
  return &data_;
}

// bool done = 7;
inline void InstallSnapShotRequest::clear_done() {
  done_ = false;
}
inline bool InstallSnapShotRequest::_internal_done() const {
  return done_;
}
inline bool InstallSnapShotRequest::done() const {
  // @@protoc_insertion_point(field_get:rf.InstallSnapShotRequest.done)
  return _internal_done();
}
inline void InstallSnapShotRequest::_internal_set_done(bool value) {
  
  done_ = value;
}
inline void InstallSnapShotRequest::set_done(bool value) {
  _internal_set_done(value);
  // @@protoc_insertion_point(field_set:rf.InstallSnapShotRequest.done)
}

// -------------------------------------------------------------------

// InstallSnapShotResponse

// int32 term = 1;
inline void InstallSnapShotResponse::clear_term() {
  term_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstallSnapShotResponse::term() const {
  // @@protoc_insertion_point(field_get:rf.InstallSnapShotResponse.term)
  return _internal_term();
}
inline void InstallSnapShotResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  term_ = value;
}
inline void InstallSnapShotResponse::set_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:rf.InstallSnapShotResponse.term)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raft_2eproto
